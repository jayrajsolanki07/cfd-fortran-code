!program Channel_flow
!This code was writtern in fotran,it wroks well.

 !variable defination****************************************************************************************************
 implicit none
 integer,parameter ::nx=31,ny=31
 integer::i,j,iter,outeriterations,outeriter
 real::dx,dy,rho,mu,omegau,omegav,omegap,xmax,ymax,mdotin,mdotout,total,xx,yy,vel
 real,dimension(0:nx+1,0:ny+1)::u,p,v,uold,vold,ae,aw,an,as,apu,apv,app,source,pp,uu,vv,pressure

!define the flow properties
rho=1.!kg/m^3
mu=0.01 !kg/m.s

outeriter=800

!outer iteration


!need to define the relaxtion factors for SOR method
omegau=0.7
omegav=0.7
omegap=0.3



  !Initialize the problem****************************************************************************************************
u =0.;v=0.;p=0.

!set the boundary conditions
u(:,0)=0.0    !bottom wall
u(:,ny+1)=0.0 !top wall
u(1,:)=1.0    !inlet b.c which is direchlet
u(nx+1,:)=u(1,:)  !to conserve the mass

uold=u;vold=v !initialization of problem

!dimensions of  domain
xmax=10. !this defines the length of the channel
ymax=3. !this defines the length of the channel
!size of the mesh
dx=xmax/float(nx)
dy=ymax/float(ny)

app=1.;apu=1.;apv=1.
ae=0.;an=0.;as=0.;aw=0.

OUTERLOOP: DO outeriterations=1,outeriter
!X momentum equation****************************************************************************************************

!we are solving momentum equations for interior cells
!we need to solve for the coefficient for the momentum equations
 do  i=2,nx
do  j=1,ny
    ae(i,j)= max(-0.5*rho*dy*(uold(i+1,j)+uold(i,j)),0.)+&
                          mu*dy/dx
    aw(i,j)= max (0.5*rho*dy*(uold(i-1,j)+uold(i,j)),0.) + &
                          mu*dy/dx
    an(i,j)= max(-0.5*rho*dx*(vold(i,j+1)+vold(i-1,j+1)),0.) + &
                          mu*dx/dy
    as(i,j)= max(0.5*rho*dx*(vold(i-1,j)+vold(i,j)),0.) + &
                          mu*dx/dy
   ! apu(i,j)=ae(i,j)+aw(i,j)+as(i,j)+an(i,j)+&
!               (0.5*rho*dy*uold(i+1,j)+uold(i,j))-&
 !              (0.5*rho*dy*uold(i-1,j)+uold(i,j))+&
  !             (0.5*rho*dx*vold(i,j+1)+vold(i-1,j+1))-&
   !            (0.5*rho*dx*vold(i-1,j)+vold(i,j))

end do;end do



      do i=2,nx

      an(i,ny)=max(-0.5*rho*dx*(vold(i,ny+1)+vold(i-1,ny+1)),0.) + &
                          mu*dx/(dy/2.)

          as(i,1)=max( 0.5*rho*dx*(vold(i,1)+vold(i-1,1)),0.) + &
                          mu*dx/(dy/2.)
      end do
    !these two  would cover the points on the north boundary and south boundary

    !these two  would cover the points on the north boundary and south boundary

apu=ae+aw+an+as
apu=apu/omegau

!now we need to write the x momentum equations using SOR technique.
!   iterate x-momentum equations


do iter=1,10
do i=2,nx
do j=1,ny
        u(i,j)=(1.-omegau)*uold(i,j)+ 1./apu(i,j)*( &
                ae(i,j)*u(i+1,j)+aw(i,j)*u(i-1,j)+ &
                an(i,j)*u(i,j+1)+as(i,j)*u(i,j-1)+ &
                (p(i-1,j)-p(i,j))*dy)

end do ;end do
!du/dx=0.0
u(nx+1,:)=u(nx,:)
end do

!now we want to conserve the mass flow rate mout min
    !  for channel problem to ensure overall mass conservation

mdotin=1.
mdotout=0.
do j=1,ny
    mdotout=mdotout+rho*dy*u(nx+1,j)
end do

!so if the mout is not as same as min flow, we need  tell the code to correct it,since we are dealing with incompressible flow
!we would consider velocity to correct the mass flow.
u(nx+1,:)=u(nx+1,:)*mdotin/mdotout
! for fuly developed flow, we need to tell this correction to updtream flow as well
u(1,:)=u(nx+1,:)
!Y momentum equation****************************************************************************************************
do i=1,nx
do j=2,ny

       ae(i,j)=max(-rho*dy*0.5*(uold(i+1,j)+uold(i+1,j-1)),0.)+mu*dy/dx
       aw(i,j)=max( rho*dy*0.5*(uold(i,j-1)+uold(i,j)),0.)+mu*dy/dx
       an(i,j)=max(-rho*dx*0.5*(vold(i,j+1)+vold(i,j)),0.)+mu*dx/dy
       as(i,j)=max( rho*dx*0.5*(vold(i,j)+vold(i,j-1)),0.)+mu*dx/dy

      ! apv(i,j)=ae(i,j)+aw(i,j)+as(i,j)+an(i,j)+&
             !  (0.5*rho*dy*uold(i+1,j)+uold(i+1,j-1))-&
              ! (0.5*rho*dy*uold(i,j-1)+uold(i,j))+&
               !(0.5*rho*dx*vold(i,j+1)+vold(i,j))-&
               !(0.5*rho*dx*vold(i,j)+vold(i,j-1))


end do;end do

!again we need to write the co efficient for the boundary cells because ae and aw are defined for the boundary cells considering
!the value dx,as we know at the boundary which is dx/2.0 distance from face centre



do j= 2,ny
    ae(nx,j)=max(-rho*dx*0.5*(uold(nx+1,j)+uold(nx+1,j-1)),0.)+mu*dy/(dx/2.)
    aw(1,j)=max( rho*dx*0.5*(uold(1,j-1)+uold(1,j)),0.)+mu*dy/(dx/2.)

end do

apv=ae+aw+an+as
apv=apv/omegav


!now time for y momentum equation which is written with SOR


do iter=1,10
do i=1,nx
do j=2,ny
        v(i,j)=(1.-omegav)*vold(i,j)+1./apv(i,j)*(&
               ae(i,j)*v(i+1,j)+&
               aw(i,j)*v(i-1,j)+&
               an(i,j)*v(i,j+1)+&
               as(i,j)*v(i,j-1)+&
               dx*(p(i,j-1)-p(i,j)))



end do ; end do;end do

!Pressure correction ****************************************************************************************************
!lets define the pressure corrections coefficient
do i=1,nx
do j=1,ny
    ae(i,j)=rho*dy**2/apu(i+1,j)
    aw(i,j)= rho*dy**2/apu(i,j)
    an(i,j)= rho*dx**2/apv(i,j+1)
    as(i,j)= rho*dx**2/apv(i,j)

end do; end do

!we need to calculate the  app for the pressure equations term, which is consists of the ae ,aw,an, as terms
!for the boundary cell for example (1,1), aw terms has to go zero in app*pp terms, so we need to implement it .,this all goes to left
!boundary and same for right boundary and top and bottom
aw(1,:)=0.
ae(nx,:)=0.
an(:,ny)=0.
as(:,1)=0.

!now we can calculate the app
app=ae+aw+an+as
app(1,1)=1.E30
pp=0.

source=0.
!we need to write the source term as well

do i=1,nx
do j=1,ny

source(i,j)=rho*dy*(u(i+1,j)-u(i,j))+rho*dx*(v(i,j+1)-v(i,j))


end do; end do


!mass imbalance
total=sum(source**2)
total=sqrt(total)

print*,'outer iteration=',outeriterations,'mass imbalance=',total


!time to write the pressure correction equation
do iter=1,100
do j= 1,ny
do i=1,nx

    pp(i,j)=pp(i,j)+1.7/app(i,j) &
             *(ae(i,j)* pp(i+1,j)+ &
               aw(i,j)* pp(i-1,j)+ &
               an(i,j)* pp(i,j+1)+ &
               as(i,j)* pp(i,j-1)- &
               source(i,j)-pp(i,j)*app(i,j))



end do;end do

end do

!correct the pressure at all the points
do i=1,nx
    do j=1,ny

     p(i,j)=p(i,j)+omegap*pp(i,j)

end do;end do
!apply u velocity correction


do i=2,nx
do j=1,ny

     u(i,j)=u(i,j)+dy/apu(i,j)*(pp(i-1,j)-pp(i,j))

end do;end do




do i=1,nx
do j=2,ny

     v(i,j)=v(i,j)+dx/apv(i,j)*(pp(i,j-1)-pp(i,j))

end do;end do
!update the velocity

uold=u
vold=v


!compute the mass source term


do i=1,nx
do j=1,ny

source(i,j)=rho*dy*(u(i+1,j)-u(i,j))+rho*dx*(v(i,j+1)-v(i,j))


end do; end do


!mass imbalance
total=sum(source**2)
total=sqrt(total)

print*,'outer iteration=',outeriterations,'mass imbalance=',total
print*

!*******************************************************************************************
end do outerloop


!Results****************************************************************************************************
!we need to write the results
open(unit=7,file='channel_flow.csv',status='new')

!first we need to write the magnitude of velocities at the scalar points, we would interpolate the velocities found at the faces

do i=2,nx
do j=2,ny

uu(i,j)=0.5*(u(i,j-1)+u(i,j))
vv(i,j)=0.5*(v(i-1,j)+v(i,j))
pressure(i,j)=0.25*(p(i-1,j-1)+p(i,j-1)+p(i-1,j)+p(i,j))

end do; end do

!now we need to consider the east and west faces
!at the west face we have already define the boundary conditions , so there is no need to define the boundary at that location.

!consider the west face and cells
uu(1,2:ny)=0.5*(u(1,1:ny-1)+u(1,2:ny))
vv(1,2:ny)=v(0,2:ny)
uu(nx+1,2:ny)=0.5*(u(nx+1,1:ny-1)+u(nx+1,2:ny))
vv(nx+1,2:ny)=v(nx+1,2:ny)
pressure(1,2:ny)=0.5*(p(1,2:ny)+p(1,1:ny-1))
pressure(nx+1,2:ny)=0.5*(p(nx,1:ny-1)+p(nx,2:ny))


!consider the north and south face of the domain


uu(2:nx,1)=u(2:nx,0)
vv(2:nx,1)=0.5*(v(1:nx-1,1)+v(2:nx,1))
uu(2:nx,ny+1)=u(2:nx,ny+1)
vv(2:nx,ny+1)=0.5*(v(1:nx-1,ny+1)+v(2:nx,ny+1))
pressure(2:nx,1)=0.5*(p(1:nx-1,1)+p(2:nx,1))
pressure(2:nx,ny+1)=0.5*(p(1:nx-1,ny)+p(2:nx,ny))

!now need to writes the corners

!corner(1,1)
uu(1,1)=0.0
vv(1,1)=0.0
pressure(1,1)=pressure(2,2)

!south east corner

uu(nx+1,0)=0.0
vv(nx+1,0)=0.0
pressure(nx+1,0)=p(nx,1)

!north east corner
uu(nx+1,ny+1)=0.0
vv(nx+1,ny+1)=0.0
pressure(nx+1,ny+1)= pressure(nx,ny)

!north west corner
uu(0,ny+1)=0.0
vv(0,ny+1)=0.0
pressure(0,ny+1)=pressure(1,ny)

!write the file which we have opened names channel_flow, with unit number 7
write(7,*)' x , y , pressure,vel,vx,vy'
do i =1,nx+1
     xx=float(i-1)*dx
   do j=1,ny+1
     yy=float(j-1)*dy
     vel=sqrt(uu(i,j)**2+vv(i,j)**2))
    write(7,8)xx,yy,0.0,pressure(i,j),vel,uu(i,j),vv(i,j),0.0
end do;end do

8 formatted(8f8.4)
end program Channel_flow
